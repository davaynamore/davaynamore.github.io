(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

var _functions = _interopRequireWildcard(require("./functions.js"));

var _objects = _interopRequireWildcard(require("./objects.js"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; if (obj != null) { var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

$(".contacts-nav__link").hover(function (event) {
  $(this).popover("toggle");
});
var cards = document.querySelectorAll('.about__card-text');
Array.from(cards).forEach(function (card) {
  var substr = card.outerText.substring(0, 399) + 'â€¦';
  card.innerText = substr;
});
var filterBtns = document.querySelectorAll('.projects__filter-btn');
document.addEventListener('click', function (event) {
  var target = event.target;
  if (!target.classList.contains('projects__filter-btn')) return;
  Array.from(filterBtns).forEach(function (btn) {
    if (btn.classList.contains('current')) {
      btn.classList.remove('current');
    }
  });
  target.classList.toggle('current');
});
var myVar = 5;
var myVar_2 = 6; // console.log(multiply(5, 3));
// console.log(sum(5, 3));
// console.log(user.getAge());
// console.log(sergey.getAge());
// console.log(vova.getAge());

for (var prop in _objects.sergey) {
  console.log(prop);
  console.log(_objects.sergey[prop]);
}

[{
  id: '2',
  category: 'soft',
  key4: 'value'
}, {
  id: '2',
  category: 'hard',
  key4: 'value'
}, {
  id: '2',
  category: 'soft',
  key4: 'value'
}];

},{"./functions.js":2,"./objects.js":3}],2:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.sum = void 0;
var variable = 10; // console.log(myVar);

function multiply(a, b) {
  return a * b;
}

var sum = function sum(a, b) {
  return a + b;
};

exports.sum = sum;
var myVar = 5;
var _default = multiply;
exports["default"] = _default;

},{}],3:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.vova = exports.sergey = exports["default"] = void 0;
var user = {
  name: 'Sergey',
  age: 20,
  group: {
    student_1: 'Yulia',
    student_2: 'Tanya',
    student_3: 'Vova'
  },
  children: ['Yarik', 'Karina'],
  getAge: function getAge() {
    return this.age;
  }
};
var _default = user;
exports["default"] = _default;

function User(name, age) {
  this.name = name;
  this.age = age;
}

User.prototype.getAge = function () {
  return this.age;
};

var sergey = new User('Sergey', '37');
exports.sergey = sergey;
var vova = new User('Vova', '27');
exports.vova = vova;

},{}]},{},[1])

//# sourceMappingURL=data:application/json;charset=utf8;base64,
